
コーディングAIシステム リファクタリング実行計画（詳細指示書）


概要

本計画は、ご指定いただいた項目に基づき、既存のコーディングAIシステムの機能改善、UI/UX刷新、および出力品質の向上を目的としたリファクタリング作業を段階的に進めるためのものです。各フェーズは、AIエージェントによるコーディング作業を想定し、具体的なタスクレベルまで落とし込んで記述されています。品質を担保するため、各フェーズ完了時には厳密なエラーチェックと動作テストを実施します。

フェーズ1: 基盤整備とコア機能のモジュール化

目的: 将来的な拡張性と保守性を高めるため、既存コードの機能を論理的なモジュールに分割し、整理します。このフェーズでは、コードの可読性と再利用性を向上させることに重点を置きます。
AIエージェントへの指示:
1. 現状コード分析:
○ タスク: 既存コードベース全体をスキャンし、主要な機能ブロック（例: ユーザー入力処理、データ分析ロジック、レポート生成、PDF出力、UIレンダリング、外部API連携など）を特定してください。
○ 詳細:
■ 各機能ブロックがどのファイル/クラス/関数で実装されているかをマッピングしてください。
■ 機能ブロック間の依存関係（データの流れ、関数呼び出し関係）をリストアップしてください。
■ 特に複雑度が高い、または変更頻度が高いと思われる箇所を特定し、その理由を記述してください。
■ AIがコードを理解するために、主要なクラスや関数の役割、処理フロー、使用しているデータ構造についてコメント形式で情報を補足してください。
○ 期待される出力: 機能リスト、依存関係マップ、懸念点のリスト、主要コンポーネントの役割説明。
2. モジュール設計:
○ タスク: 上記で特定された機能に基づき、新しいモジュール構造を設計してください。単一責任の原則 1 に従い、各モジュールが一つの明確な責務を持つようにしてください。
○ 詳細:
■ 提案するモジュール名（例: input_handler.py, analysis_engine.py, report_generator.py, pdf_exporter.py, ui_manager.py, api_client.py など）とその責務を定義してください。
■ 各モジュールの公開インターフェース（関数名、クラス名、引数、戻り値の型、期待される動作）を具体的に定義してください。例えば、「analysis_engine.py の analyze_data(input_data: dict) -> dict: は、入力辞書を受け取り、分析結果を辞書で返す」のように記述します。
■ モジュール間の理想的な依存関係を図示してください（例: input_handler は analysis_engine を呼び出すが、逆はない）。
○ 期待される出力: モジュール構成図、各モジュールの責務定義、インターフェース定義書。
3. 機能ごとのモジュール化実装:
○ タスク: 既存コードを、設計された新しいモジュール構造へ段階的に移行してください。
○ 詳細:
■ 一度に一つの機能（または関連の深い機能群）を選択し、対応する新モジュールへコードを移動・リファクタリングしてください。
■ 例: 「既存のユーザー入力検証ロジックを input_handler.py 内の validate_user_input(params) 関数として実装し、関連するUIコードからの呼び出し箇所を修正してください。」
■ 既存のロジックや振る舞いを変更しないように注意してください。
■ モジュール間の結合度を下げ、凝集度を高めるように意識してください。
■ リファクタリングの各ステップで、小さなコミットを行うことを推奨します。
○ 期待される出力: モジュール化されたコード、各コミットログ。
4. 共通ユーティリティの整備:
○ タスク: 複数の新モジュールで共通して利用される関数、定数、クラスなどを特定し、common_utils.py や core_helpers.py のような共有モジュールに集約してください。
○ 詳細:
■ 想定される共通ユーティリティの例:
■ ロギング設定・ラッパー関数
■ 設定ファイル読み込み・管理クラス
■ 共通データ構造（例: APIレスポンス用の汎用クラス）
■ 日付時刻処理関数
■ 文字列操作ユーティリティ
■ 共有モジュール自体も単一責任の原則を意識し、関連性の薄い機能は別モジュールに分けることを検討してください。
○ 期待される出力: 共通ユーティリティモジュール、それを利用するように修正された各モジュール。
エラーチェックと動作テスト (フェーズ1完了時):
● 静的解析: 対象言語に応じた静的解析ツール（例: PythonならPylint, Flake8, MyPy）を実行し、エラーや警告、コードスタイル違反を修正してください。
● ユニットテスト:
○ 既存のユニットテストがすべてパスすることを確認してください。
○ モジュール化によって新たに作成されたインターフェースや主要なロジックに対して、ユニットテストを作成または拡充してください。特に、モジュール間の境界部分のテストを重視してください。
○ テストカバレッジを測定し、重要なロジックがカバーされていることを確認してください。
● 結合テスト:
○ モジュール化された機能が、以前と同様に連携して動作することを確認してください。主要なユースケースをいくつか実行し、期待通りの結果が得られるかテストしてください。
● 機能テスト:
○ システム全体の主要機能（例: 特定の入力に対するレポート生成、PDF出力など）が、リファクタリング前と変わらず正しく動作することを確認してください。
● コードレビュー: 可能であれば、他の開発者（または別のAIエージェント）にコードレビューを依頼し、モジュール設計の妥当性、コードの可読性、保守性についてフィードバックを得てください。

フェーズ2: UI/UXデザインの刷新（基本デザインと共通コンポーネント）

目的: システム全体のデザインをモダンで統一感のあるものに刷新し、ユーザー体験を向上させます。このフェーズでは、インテル風のカラースキームとピクトグラムベースのアイコンを導入し、視覚的な明瞭さを高めます。
AIエージェントへの指示:
1. デザインガイドライン策定:
○ タスク: 以下の指針に基づき、UIデザインガイドラインを策定し、ドキュメント化してください。
○ 詳細:
■ カラースキーム:
■ ベースカラー: 白 (#FFFFFF) を背景や主要コンテンツエリアに使用します。
■ プライマリーカラー: Intel Blue (#00C7FD) を主要なアクションボタン、アクティブな要素、強調したい情報に使用します。
■ セカンダリーカラー/アクセントカラー: Intel Dark Blue (#0068B5) を補足的な情報、一部のアイコン、またはプライマリーカラーとのコントラストが必要な場合に使用します。
■ テキストカラー: 基本はダークグレー (#333333 など) とし、可読性を確保します。エラーメッセージには赤系統、成功メッセージには緑系統の色を定義します。
■ タイポグラフィ:
■ フォントファミリー: システムフォント（例: Segoe UI, San Francisco, Roboto）または可読性の高いオープンソースフォント（例: Inter, Open Sans）を選定します。
■ 基本フォントサイズ: 例: 16px。
■ ヘッダー階層: H1, H2, H3 などのフォントサイズ、ウェイト、マージンを定義します (例: H1: 32px bold, H2: 24px bold)。
■ アイコン:
■ スタイル: イラストを全面的に廃止し、線で作られたシンプルな幾何学図形ベースのピクトグラムを採用します。
■ ライブラリ: Material Design Icons や Feather Icons などのオープンソースライブラリから選定するか、統一されたスタイルでカスタム作成します。
■ 原則: アイコンは普遍的で認識しやすく、機能を直感的に伝えるものとします。
■ レイアウト:
■ グリッドシステム: 8pxグリッドなどを基本とし、要素の配置と間隔に一貫性を持たせます。
■ 余白: コンテンツブロック間、要素間の余白ルールを定義します。
○ 期待される出力: デザインガイドラインドキュメント（カラースキーム、タイポグラフィ、アイコンスタイル、レイアウトルールを明記）。
2. 共通UIコンポーネント開発/刷新:
○ タスク: 以下の共通UIコンポーネントを、策定したデザインガイドラインに基づいて再設計または新規開発してください。
○ 詳細:
■ 対象コンポーネント: ボタン（プライマリ、セカンダリ、テキスト、アイコンボタン）、入力フォーム（テキストフィールド、テキストエリア、セレクトボックス、チェックボックス、ラジオボタン）、ドロップダウンメニュー、モーダルダイアログ、ナビゲーションバー、タブ、アコーディオン、ローディングスピナー、アラートメッセージ。
■ 各コンポーネントについて、通常時、ホバー時、アクティブ/フォーカス時、無効時のスタイルを定義・実装してください。
■ コンポーネントは再利用可能で、propsを通じてカスタマイズ可能（例: ボタンのテキスト、アイコン、クリックイベントハンドラ）なように設計してください。
○ 期待される出力: スタイル適用済みの共通UIコンポーネントのコード、各コンポーネントのバリエーションを示すサンプルページ。
3. ユーザー入力部分と説明部分の視覚的切り分け:
○ タスク: ユーザーが操作するインタラクティブな要素（入力フィールド、ボタンなど）と、システムからの説明やガイダンスなどの静的コンテンツを視覚的に明確に区別できるようにデザイン・実装してください。
○ 詳細:
■ 入力部分のスタイル:
■ 背景色: 明るいグレーや、わずかに色がついた背景などで、説明部分と区別します。
■ 枠線: 入力フィールドには明確な枠線を設けます。
■ 配置: 関連する入力要素はグループ化し、周囲に適切なパディングを設けます。
■ 説明部分のスタイル:
■ フォントサイズ: 基本フォントサイズよりも2ポイント小さく設定します（例: 基本16pxなら説明14px）。
■ フォントウェイト: 通常のウェイトを使用し、強調が必要な箇所のみ太字にします。
■ 配置: 入力部分との関連性がわかるように配置しつつ、視覚的な階層を意識します。
■ 具体的なCSSプロパティの例: background-color, border, padding, margin, font-size, font-weight, color。
○ 期待される出力: スタイル適用済みの入力フォームと説明文の組み合わせ例。
4. 基本レイアウト適用:
○ タスク: システム全体の主要なページ（例: トップページ、設定ページ、レポート表示ページなど）の基本レイアウトに、新しいデザインガイドラインと共通コンポーネントを適用してください。
○ 詳細:
■ ヘッダー: ロゴ、主要ナビゲーション、ユーザー情報などを配置。
■ フッター: コピーライト情報、関連リンクなどを配置。
■ サイドバー（必要な場合）: サブナビゲーション、フィルタオプションなどを配置。
■ メインコンテンツエリア: 各ページの主要な情報を表示。
■ ワイヤーフレームやモックアップに基づいて、要素の配置、サイズ、間隔を調整してください。
○ 期待される出力: 新しいデザインが適用された主要ページのスクリーンショットまたは動作デモ。
エラーチェックと動作テスト (フェーズ2完了時):
● デザインレビュー:
○ 策定したデザインガイドラインと実装されたUIを照合し、一貫性が保たれているか確認してください。
○ カラースキーム、タイポグラフィ、アイコン、レイアウトが意図通りに適用されているか確認してください。
● コンポーネントテスト:
○ 各共通UIコンポーネントが、定義されたすべての状態（ホバー、アクティブ、無効など）で正しく表示され、機能することを確認してください。
○ コンポーネントのpropsが期待通りに動作することを確認してください。
● レスポンシブテスト:
○ 主要な画面サイズ（デスクトップ、タブレット、モバイル）でレイアウトが崩れず、コンテンツが適切に表示されることを確認してください。
● ブラウザ互換性テスト:
○ 主要なウェブブラウザ（Chrome, Firefox, Safari, Edgeの最新版）で表示と動作に問題がないことを確認してください。
● ユーザビリティチェック:
○ ユーザー入力部分と説明部分の区別が明確で、ユーザーが直感的に操作できるか確認してください。
○ 文字サイズ変更が適用され、可読性に問題がないか確認してください。
● アクセシビリティチェック (基本):
○ キーボードのみでの操作が可能か確認してください。
○ 主要な要素のコントラスト比がWCAG基準を満たしているか確認してください。
○ 画像やアイコンに適切な代替テキストが設定されているか確認してください（必要な場合）。

フェーズ3: レポート機能の強化とパーソナライズ

目的: レポートの価値を高め、ユーザーにとってより有用な情報を提供できるように機能を改善します。具体的には、URLに基づいた詳細なパーソナライズ機能を追加し、不要なUI要素を削除します。
AIエージェントへの指示:
1. URLベースの詳細パーソナライズレポート機能の実装:
○ タスク: ユーザーが入力したURLから取得可能な追加情報を分析ロジックに組み込み、より詳細でパーソナライズされたレポートコンテンツを生成する機能を実装してください。
○ 詳細:
■ 情報取得:
■ 既存のURL分析機能に加え、以下の情報を取得・解析する処理を追加してください:
■ HTMLメタタグ (例: description, keywords, author)
■ Open Graph Protocol (OGP) タグ (例: og:title, og:description, og:image)
■ 主要な見出しタグ (H1, H2, H3) の内容と構造
■ 構造化データ (例: JSON-LD, Microdata, RDFa) の有無と主要な情報
■ ページ内で使用されている主要なキーワードの出現頻度（簡易的なもので可）
■ 外部リンク・内部リンクの数（概算）
■ （可能であれば）使用されている主要な技術スタックのヒント（例: WordPress, Shopify などのCMS識別）
■ 分析ロジック:
■ 取得した情報を基に、以下のようなパーソナライズされた分析や提案を生成するロジックを開発してください:
■ 「ページの主要テーマはXXで、H1タグの内容と一致しています/乖離があります。」
■ 「OGP設定が適切に行われており、SNSでのシェア時に効果的な表示が期待できます/不足しています。」
■ 「構造化データがXXタイプでマークアップされており、検索エンジンによるリッチリザルト表示の可能性があります/マークアップされていません。」
■ 「ページ内でキーワードYYがZZ回使用されていますが、関連キーワードAAの追加も検討できます。」
■ レポート表示:
■ レポート表示画面を改修し、これらのパーソナライズされた情報を専用のセクションに分かりやすく表示してください。
■ 必要に応じて、フェーズ2で作成した共通UIコンポーネント（例: アコーディオン、カード）を活用してください。
○ 期待される出力: パーソナライズ情報取得・分析ロジックのコード、更新されたレポート表示画面のコードとスクリーンショット。
2. 分析後メーター風項目の削除:
○ タスク: 現在のUIに表示されている「車のメーターのような項目」（意味が不明瞭で不要と判断されたもの）を特定し、表示ロジックおよび関連するデータ処理を完全に削除してください。
○ 詳細:
■ 削除対象のUI要素を特定してください（例: ダッシュボード画面の中央に表示されている3つの円形ゲージ、それぞれのラベルが「総合スコア」「速度」「最適化」となっているもの）。
■ 該当するUIコンポーネントのコード、およびそのデータを生成・取得しているバックエンドのロジックを削除してください。
■ 関連するデータベースのスキーマや設定ファイルがあれば、それらも適切に修正してください。
■ UI要素の削除に伴い、レイアウトが崩れないように、周囲の要素の配置やスタイルを調整してください。
○ 期待される出力: メーター風項目が削除されたUIのスクリーンショット、関連コードの差分。
エラーチェックと動作テスト (フェーズ3完了時):
● パーソナライズ機能テスト:
○ 様々な種類のURL（ブログ記事、ECサイト商品ページ、企業トップページなど）を入力し、パーソナライズされた情報が正しく取得・分析され、レポートに表示されることを確認してください。
○ 取得情報が欠落している場合や、特殊な構造のページの場合でも、システムがエラーを起こさず、適切に処理されることを確認してください（例: 「情報が取得できませんでした」などのメッセージ表示）。
○ パーソナライズされた提案内容が、入力URLの特性に対して妥当であることを確認してください。
● メーター風項目削除確認:
○ 対象のメーター風項目がUIから完全に削除されていることを確認してください。
○ 関連するバックエンド処理やデータが削除され、システムに不要な負荷がかかっていないことを確認してください。
○ UIのレイアウトが意図通りに調整されていることを確認してください。
● リグレッションテスト:
○ 既存のレポート生成機能、PDF出力機能など、他の機能に悪影響（デグレード）が出ていないことを確認してください。
○ 特に、パーソナライズ機能追加や項目削除によって、既存の分析ロジックの精度やパフォーマンスが低下していないか確認してください。
● データ整合性テスト:
○ パーソナライズ機能が参照するデータソースや、メーター風項目に関連していたデータが、削除・変更後もシステム全体のデータ整合性を損なっていないことを確認してください。

フェーズ4: PDF出力機能の改善

目的: PDFレポートの品質と情報量を向上させ、ユーザーにとってより価値のあるドキュメントを提供します。AIO分析結果、SEO分析結果、SEOタイトル・メタディスクリプションをPDFに追加し、改ページ制御と文字化け対策を施します。
AIエージェントへの指示:
1. AIO分析結果とSEO分析結果のPDF表示:
○ タスク: 現在ウェブ画面に表示されているAIO分析結果とSEO分析結果を、PDFレポートにも含めるように実装してください。
○ 詳細:
■ PDF生成ロジックを修正し、AIO分析結果とSEO分析結果のデータを取得・整形してPDFに埋め込む処理を追加してください。
■ PDFテンプレート（HTMLベースの場合）を改修し、これらの分析結果を表示するための専用セクションを設けてください。
■ 各分析結果は、ウェブ画面と同様の分かりやすい形式（例: 見出し、箇条書き、表など）で表示してください。
■ フェーズ2で定義したデザインガイドライン（フォント、色など）をPDFにも適用し、ウェブ画面との一貫性を保ってください。
○ 期待される出力: AIO/SEO分析結果が追加されたPDF生成ロジックとテンプレート、サンプルPDF。
2. PDF出力時の改ページ制御:
○ タスク: PDF出力時に、セクションの途中で不自然に改ページされたり、テキストや図表が途切れたりしないように、改ページ制御を実装してください。
○ 詳細:
■ CSSの page-break-before: always; プロパティを使用して、主要なセクション（例: AIO分析結果の開始前、SEO分析結果の開始前）の直前に強制的に改ページを挿入してください。
■ CSSの page-break-inside: avoid; プロパティを使用して、テーブル、長いリスト、図表、まとまった段落などがページ間で分割されないようにしてください。
■ 例えば、以下のようなCSSクラスを定義し、適切なHTML要素に適用します:
.pdf-section-start { page-break-before: always; }.pdf-avoid-break { page-break-inside: avoid; }```
■ 特に長いコンテンツが表示される可能性がある箇所（例: 詳細な分析結果のテキストブロック）に注意してください。
○ 期待される出力: 改ページ制御が適用されたPDFテンプレート、様々なコンテンツ量で生成したサンプルPDF。
3. SEOタイトルとメタディスクリプションのPDF表示:
○ タスク: 分析対象URLから取得したSEOタイトルとメタディスクリプションを、PDFレポートの適切な箇所（例: レポート冒頭のサマリーセクションや、SEO分析セクション内）に表示する機能を追加してください。
○ 詳細:
■ PDF生成ロジックに、SEOタイトルとメタディスクリプションのデータを渡す処理を追加してください。
■ PDFテンプレートに、これらの情報を表示するための専用の領域（例: ラベル付きのテキスト表示）を設けてください。
○ 期待される出力: SEOタイトル/メタディスクリプション表示機能が追加されたPDF生成ロジックとテンプレート、サンプルPDF。
4. 文字化け対応ロジックの実装:
○ タスク: SEOタイトルやメタディスクリプションが、取得元（対象URLのサーバー設定やコンテンツ自体）の問題で文字化けして取得された場合に、そのまま文字化けしたテキストを表示するのではなく、原因を示唆するメッセージを表示するロジックを実装してください。
○ 詳細:
■ 文字化けを検知するロジックを実装してください。
■ 単純な方法としては、取得した文字列がUTF-8として妥当かチェックする、特定の文字コード範囲外の文字（例: Unicodeの置換文字 U+FFFD）が含まれているかチェックするなど。
■ より高度な方法としては、言語判定ライブラリと組み合わせて、明らかに不自然な文字列パターンを検出することも検討できます。
■ 文字化けが検知された場合、PDFには以下のようなメッセージを表示してください:
「SEOタイトル（またはメタディスクリプション）の取得時に文字化けが発生しました。指定されたURLのサーバーで文字エンコーディング（UTF-8推奨）が正しく設定されていないか、コンテンツに特殊文字が含まれている可能性があります。サイト管理者にご確認ください。」
■ 文字化けしていない場合は、通常通りタイトル/ディスクリプションを表示してください。
○ 期待される出力: 文字化け検知・対応ロジックのコード、文字化け時と正常時の両方のサンプルPDF。
エラーチェックと動作テスト (フェーズ4完了時):
● PDF内容確認:
○ AIO分析結果、SEO分析結果、SEOタイトル、メタディスクリプションが、PDFに正確かつ適切なフォーマットで表示されていることを確認してください。
○ ウェブ画面の情報とPDFの情報に齟齬がないことを確認してください。
● 改ページ制御テスト:
○ 様々なデータ量（短いレポート、非常に長いレポート）でPDFを生成し、改ページが意図通りに機能していることを確認してください。
○ テーブル、リスト、画像などが不自然に分割されていないか、主要セクションが新しいページから始まっているかなどを確認してください。
● 文字化け対応テスト:
○ 意図的に文字化けしたデータ（または文字化けをシミュレートするデータ）を入力し、PDFに適切なエラーメッセージが表示されることを確認してください。
○ 日本語、英語、記号など、様々な種類の正常なSEOタイトル/メタディスクリプションが文字化けせずに正しく表示されることを確認してください。
● PDF品質テスト:
○ PDF全体のレイアウト、フォントの埋め込み、画像の解像度、ファイルサイズが適切であることを確認してください。
○ 複数のPDFビューア（Adobe Acrobat Reader, 主要ブラウザのPDFビューアなど）で表示に問題がないことを確認してください。
● パフォーマンステスト:
○ PDF生成処理の速度が、機能追加前と比較して大幅に低下していないことを確認してください。

フェーズ5: 個別画面の調整と統合レポートの刷新

目的: 特定画面の利便性を向上させ、統合レポートのデザインと情報密度を改善します。SEO分析画面のグラフ項目を日本語化し、統合レポートをアクセンチュア風の洗練されたデザインに変更し、情報量を増やします。
AIエージェントへの指示:
1. SEO分析画面のグラフ項目日本語化:
○ タスク: SEO分析画面で使用されているグラフ（例: キーワードランキング推移、被リンク数推移など）の軸ラベル、凡例、ツールチップなどのテキスト項目を、すべて自然な日本語に翻訳・修正してください。
○ 詳細:
■ 対象となるグラフをすべて特定し、各グラフのどのテキスト要素が英語（または他の言語）になっているかをリストアップしてください。
■ 各テキスト要素に対して、適切で分かりやすい日本語訳を割り当ててください（例: "Keywords" -> "キーワード", "Monthly Visits" -> "月間訪問数", "Ranking" -> "順位"）。
■ グラフ描画ライブラリ（例: Chart.js, D3.js, Highchartsなど）の設定を修正し、日本語テキストが正しく表示されるようにしてください。
■ フォントが日本語表示に対応しているか確認し、必要であれば日本語対応フォントを指定してください。
■ システムが多言語対応を前提としている場合は、国際化（i18n）ライブラリの翻訳ファイルに日本語訳を追加・修正する形式で対応してください。
○ 期待される出力: 日本語化されたSEO分析画面のスクリーンショット、関連コード（グラフ設定、i18nファイルなど）の差分。
2. 統合レポートのデザイン変更（アクセンチュア風）:
○ タスク: 現在の統合レポートのデザインを、アクセンチュアの公開レポート などを参考に、より洗練され、プロフェッショナルで情報が伝わりやすいデザインに変更してください。
○ 詳細:
■ レイアウト:
■ 情報を論理的なセクションに分割し、明確な見出し階層（H1, H2, H3）を使用してください。
■ 十分な余白（ホワイトスペース）を確保し、視覚的な圧迫感を軽減し、可読性を向上させてください。
■ グリッドシステムを意識し、要素の配置に一貫性を持たせてください。
■ カラースキーム:
■ フェーズ2で定義したインテル風の白とブルーを基調としつつ、必要に応じて濃淡やアクセントカラー（例: グレー、インテルダークブルー以外の落ち着いたブルーのバリエーション）を効果的に使用し、プロフェッショナルな印象を強化してください。
■ 色の使用は控えめにし、情報の強調や区別のために戦略的に使用してください。
■ グラフ・図表:
■ データを効果的に視覚化するため、シンプルでクリーンなデザインのグラフや図表を採用してください。
■ 不要な装飾（3D効果、過度なグラデーションなど）は避け、情報の伝達を最優先してください。
■ グラフの軸ラベル、凡例、タイトルは明確で分かりやすいものにしてください（日本語化も含む）。
■ タイポグラフィ:
■ 見出し、本文、キャプション、引用などでフォントサイズ、ウェイト、行間を適切に使い分け、情報の重要度と階層構造を視覚的に表現してください。
■ 可読性の高いサンセリフ体のフォントファミリーを選定してください。
■ アイコン/ピクトグラム:
■ フェーズ2で定義したピクトグラムスタイルに準拠し、情報を補足する目的で控えめに使用してください。
○ 期待される出力: 新しいデザインが適用された統合レポートのモックアップ（またはHTML/CSSプロトタイプ）、デザインコンセプト説明。
3. 統合レポートの文字量増加と内容拡充:
○ タスク: 統合レポートの各分析項目について、単なる結果表示だけでなく、より詳細な解説、考えられる背景や原因、具体的な改善アクションの提案などを追加し、レポート全体の情報密度と提供価値を高めてください。
○ 詳細:
■ 各分析セクションの拡充:
■ 例（SEO分析）: 「キーワードXXの順位がYY位です」だけでなく、「このキーワードは検索ボリュームが多く、競合も激しいため、コンテンツの質向上と被リンク獲得が重要です。具体的なアクションとして、1. 記事ZZの専門性を高める、2. 関連キーワードAA, BBを盛り込む、3. 権威性のあるサイトからの被リンクを目指す、などが考えられます。」のように記述します。
■ 例（AIO分析）: 分析結果の数値だけでなく、それが何を意味するのか、業界平均と比較してどうなのか（もし情報があれば）、改善することでどのような効果が期待できるのか、などを追記します。
■ サマリー/エグゼクティブサマリーの追加: レポート冒頭に、主要な分析結果と最も重要な改善提案をまとめたサマリーセクションを設けます。
■ 結論と次のステップの提案: レポート末尾に、全体の結論と、ユーザーが次に取り組むべき具体的なステップを提示します。
■ 参考情報へのリンク: 必要に応じて、関連する知識ベースの記事や外部の参考資料へのリンクを記載します。
■ 文体: 客観的かつ建設的なトーンで記述し、専門用語には適宜解説を加えるなど、ユーザーが理解しやすいように配慮してください。
○ 期待される出力: 文字量が増加し、内容が拡充された統合レポートのサンプル（テキストベースまたはHTML）。
エラーチェックと動作テスト (フェーズ5完了時):
● SEO分析画面テスト:
○ SEO分析画面のすべてのグラフ項目が、正しく日本語で表示されていることを確認してください。
○ ツールチップや凡例なども含め、翻訳漏れがないか確認してください。
○ 日本語表示によってレイアウトが崩れていないか確認してください。
● 統合レポートデザインレビュー:
○ 統合レポートのデザインが、指示された「アクセンチュア風」の洗練されたプロフェッショナルなものになっているか、モックアップやコンセプトと比較して確認してください。
○ レイアウト、配色、タイポグラフィ、グラフデザインなどが意図通りに実装されているか確認してください。
○ 異なる画面サイズ（特にPCでの閲覧）で表示が最適化されているか確認してください。
● 統合レポート内容確認:
○ レポートの文字量が増加し、各分析項目に対する詳細な解説、洞察、改善提案が適切に追加されていることを確認してください。
○ 追加された情報がユーザーにとって価値があり、具体的で実行可能な提案になっているか確認してください。
○ サマリー、結論、次のステップなどが効果的に記述されているか確認してください。
● 一貫性テスト:
○ システム全体のデザイン（フェーズ2で定義）と、統合レポートのデザインに一貫性があるか確認してください。
○ 用語の統一性（例: SEO分析画面と統合レポートでの同じ指標の名称）が保たれているか確認してください。
● リグレッションテスト:
○ このフェーズでの変更が、他の画面や機能に悪影響を与えていないことを確認してください。

フェーズ6: 最終テストとデプロイ準備

目的: システム全体の品質を最終確認し、安定した状態でリリースできるように準備を整えます。すべての変更が統合された状態で、徹底的なテストを実施します。
AIエージェントへの指示:
1. 総合テスト:
○ タスク: これまでのフェーズで行ったすべての変更を統合したシステム全体に対して、包括的なテストを実施してください。
○ 詳細:
■ シナリオテスト:
■ 主要なユーザーシナリオを複数定義し、最初から最後まで通しで実行してください。例:
1. 新規ユーザーがアカウント登録し、初めてURLを入力して分析を実行。パーソナライズされたレポート（ウェブ版）を確認し、その後PDFレポートをダウンロードする。
2. 既存ユーザーがログインし、過去の分析結果一覧から特定のレポートを選択。SEO分析画面の日本語化されたグラフを確認し、統合レポート（ウェブ版・アクセンチュア風デザイン）を閲覧する。
3. 特殊なURL（例: 非常に長いURL、リダイレクトが多いURL、コンテンツが少ないURL、文字化けしやすい文字を含むURL）を入力し、システムがエラーなく処理し、適切な結果またはメッセージを表示することを確認する。
■ 機能網羅テスト: これまでのフェーズで変更・追加されたすべての機能（モジュール化、UI刷新、パーソナライズ、PDF出力改善、個別画面調整、統合レポート刷新）が、個別にそして連携して正しく動作することを再度確認してください。
■ エッジケーステスト: 想定される境界値や異常系の入力（例: 空の入力、長すぎる入力、不正な形式のURL）に対して、システムが適切にエラーハンドリングを行い、クラッシュしないことを確認してください。
■ パフォーマンステスト:
■ 主要な処理（例: URL分析、レポート生成、PDF生成）の応答速度を測定し、許容範囲内であることを確認してください。
■ 高負荷状態（例: 多数の同時アクセス、大規模データの処理）をシミュレートし、システムの安定性とリソース消費量（CPU、メモリ）を監視してください。
■ セキュリティテスト (基本):
■ 入力バリデーションが適切に行われ、一般的な脆弱性（例: XSS、SQLインジェクションの可能性がないか、特にURL入力や表示箇所）がないか確認してください。
■ パーソナライズ機能や外部URLの処理において、意図しない情報漏洩や不正な動作を引き起こす可能性がないか確認してください。
○ 期待される出力: 総合テストのテストケース一覧、実行結果レポート、発見された不具合のリスト。
2. ユーザビリティテスト:
○ タスク: システム全体のユーザビリティについて、実際のユーザー視点での評価を行ってください（可能であれば実際のユーザーに依頼、難しければ開発者自身がユーザーになりきって評価）。
○ 詳細:
■ 以下の観点で評価してください:
■ 操作の直感性: 各機能の使い方が分かりやすいか。迷うことなく目的の操作ができるか。
■ 情報の見つけやすさ: 必要な情報（例: 分析結果、設定項目、ヘルプ）が簡単に見つかるか。
■ デザインの一貫性と視認性: 全体を通してデザインに一貫性があり、文字やアイコンが見やすいか。
■ エラーメッセージの分かりやすさ: エラー発生時に、原因と対処法がユーザーに理解できるように表示されるか。
■ 全体的な満足度: システムを使っていてストレスを感じないか。快適に利用できるか。
■ 発見されたユーザビリティ上の問題点や改善提案をリストアップしてください。軽微なものはこのフェーズで修正を検討します。
○ 期待される出力: ユーザビリティテストの評価結果、改善提案リスト。
3. ドキュメント更新:
○ タスク: これまでのリファクタリング作業で変更されたすべての機能、UI、仕様に合わせて、関連するドキュメントを最新の状態に更新してください。
○ 詳細:
■ ユーザーマニュアル/ヘルプドキュメント: 新機能の説明、UIの変更点、操作方法などを追記・修正してください。
■ 開発者向けドキュメント:
■ アーキテクチャ図、モジュール構成図、API仕様書などを更新してください。
■ コードコメントが最新かつ正確であることを確認してください。
■ ビルド・デプロイ手順に変更があれば更新してください。
■ テストドキュメント: テストケース、テストシナリオを最新の状態に更新してください。
○ 期待される出力: 更新された各種ドキュメント。
4. リリース準備:
○ タスク: システムを安定して本番環境にリリースするための準備を行ってください。
○ 詳細:
■ リリース手順書の作成/確認:
■ 本番環境へのデプロイ手順を詳細に記述した手順書を作成または更新してください。
■ 各ステップの担当者、所要時間、確認項目を明確にしてください。
■ ロールバック計画の準備:
■ 万が一リリース後に重大な問題が発生した場合に、迅速に以前の安定バージョンに戻すためのロールバック手順を準備・確認してください。
■ 本番環境設定確認:
■ 本番環境のデータベース接続情報、APIキー、各種設定値などが正しく構成されていることを確認してください。
■ 必要な環境変数が設定されていることを確認してください。
■ 最終ビルドと成果物の確認:
■ リリース対象のコードをビルドし、生成された成果物（実行ファイル、パッケージなど）に問題がないことを確認してください。
■ バージョン番号が正しく設定されていることを確認してください。
○ 期待される出力: リリース手順書、ロールバック計画書、本番環境設定チェックリスト。
エラーチェックと動作テスト (フェーズ6完了時):
● テスト結果確認: すべての総合テストケースがパスし、クリティカルな不具合が残っていないことを確認してください。
● ユーザビリティ改善: ユーザビリティテストで発見された重要な問題点が修正されていることを確認してください。
● ドキュメントレビュー: 更新されたドキュメントの内容が正確かつ網羅的で、最新のシステム仕様と一致していることを確認してください。
● リリース準備完了確認: リリース手順書、ロールバック計画が整備され、関係者間で共有・理解されていることを確認してください。本番環境へのデプロイに必要なすべての準備が整っていることを確認してください。
この詳細指示書が、AIエージェントによるリファクタリング作業を円滑に進めるための一助となれば幸いです。各フェーズの進捗や発見された課題に応じて、適宜指示内容を調整してください。
引用文献
1. 成功するリファクタリング: ベストプラクティスとテクニック ..., 6月 13, 2025にアクセス、 https://korogaruomochi.com/successful-refactoring-best-practices-and-techniques/
